'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="FDA_FOOD_ANGULAR")>  _
Partial Public Class SEARCH_SYSTEMDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertREQUESTTYPE(instance As REQUESTTYPE)
    End Sub
  Partial Private Sub UpdateREQUESTTYPE(instance As REQUESTTYPE)
    End Sub
  Partial Private Sub DeleteREQUESTTYPE(instance As REQUESTTYPE)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("FDA_FOOD_ANGULARConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property REQUESTTYPEs() As System.Data.Linq.Table(Of REQUESTTYPE)
		Get
			Return Me.GetTable(Of REQUESTTYPE)
		End Get
	End Property
	
	Public ReadOnly Property STATUS_MASTERs() As System.Data.Linq.Table(Of STATUS_MASTER)
		Get
			Return Me.GetTable(Of STATUS_MASTER)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.REQUESTTYPE")>  _
Partial Public Class REQUESTTYPE
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDA As Integer
	
	Private _TYPEREQUEST As String
	
	Private _PROCESS_ID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDAChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDAChanged()
    End Sub
    Partial Private Sub OnTYPEREQUESTChanging(value As String)
    End Sub
    Partial Private Sub OnTYPEREQUESTChanged()
    End Sub
    Partial Private Sub OnPROCESS_IDChanging(value As String)
    End Sub
    Partial Private Sub OnPROCESS_IDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDA", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDA() As Integer
		Get
			Return Me._IDA
		End Get
		Set
			If ((Me._IDA = value)  _
						= false) Then
				Me.OnIDAChanging(value)
				Me.SendPropertyChanging
				Me._IDA = value
				Me.SendPropertyChanged("IDA")
				Me.OnIDAChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TYPEREQUEST", DbType:="NVarChar(20)")>  _
	Public Property TYPEREQUEST() As String
		Get
			Return Me._TYPEREQUEST
		End Get
		Set
			If (String.Equals(Me._TYPEREQUEST, value) = false) Then
				Me.OnTYPEREQUESTChanging(value)
				Me.SendPropertyChanging
				Me._TYPEREQUEST = value
				Me.SendPropertyChanged("TYPEREQUEST")
				Me.OnTYPEREQUESTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PROCESS_ID", DbType:="NVarChar(20)")>  _
	Public Property PROCESS_ID() As String
		Get
			Return Me._PROCESS_ID
		End Get
		Set
			If (String.Equals(Me._PROCESS_ID, value) = false) Then
				Me.OnPROCESS_IDChanging(value)
				Me.SendPropertyChanging
				Me._PROCESS_ID = value
				Me.SendPropertyChanged("PROCESS_ID")
				Me.OnPROCESS_IDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.STATUS_MASTER")>  _
Partial Public Class STATUS_MASTER
	
	Private _STATUS_ID As Integer
	
	Private _STATUS_NAME As String
	
	Private _STATUS_CUS As String
	
	Private _STATUS_STAFF As String
	
	Private _CAL As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STATUS_ID", DbType:="Int NOT NULL")>  _
	Public Property STATUS_ID() As Integer
		Get
			Return Me._STATUS_ID
		End Get
		Set
			If ((Me._STATUS_ID = value)  _
						= false) Then
				Me._STATUS_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STATUS_NAME", DbType:="NVarChar(MAX)")>  _
	Public Property STATUS_NAME() As String
		Get
			Return Me._STATUS_NAME
		End Get
		Set
			If (String.Equals(Me._STATUS_NAME, value) = false) Then
				Me._STATUS_NAME = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STATUS_CUS", DbType:="NVarChar(MAX)")>  _
	Public Property STATUS_CUS() As String
		Get
			Return Me._STATUS_CUS
		End Get
		Set
			If (String.Equals(Me._STATUS_CUS, value) = false) Then
				Me._STATUS_CUS = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STATUS_STAFF", DbType:="NVarChar(MAX)")>  _
	Public Property STATUS_STAFF() As String
		Get
			Return Me._STATUS_STAFF
		End Get
		Set
			If (String.Equals(Me._STATUS_STAFF, value) = false) Then
				Me._STATUS_STAFF = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CAL", DbType:="NVarChar(1)")>  _
	Public Property CAL() As String
		Get
			Return Me._CAL
		End Get
		Set
			If (String.Equals(Me._CAL, value) = false) Then
				Me._CAL = value
			End If
		End Set
	End Property
End Class
